{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastAPI mock middleware","text":"<p>FastAPI middleware for mocking response data of non-implemented endpoints.</p> <p>Mock data is generated in accordance with endpoint return type or provided response_model using polifactory.</p> <p>For more information on how to use fastapi-mock-middleware, please refer to the official documentation.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install fastapi-mock-middleware\n</code></pre>"},{"location":"#usage-example","title":"Usage example","text":"<p>Add <code>MockAPIMiddleware</code> middleware to app and raise <code>APINotImplementedError</code> in your endpoint stubs.</p> <pre><code>import uvicorn\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nfrom fastapi_mock_middleware import MockAPIMiddleware, APINotImplementedError\n\napp = FastAPI()\napp.add_middleware(MockAPIMiddleware)\n\n\nclass Item(BaseModel):\n    id: int\n    name: str\n\n\n@app.get('/')\nasync def list_items() -&gt; list[Item]:\n    raise APINotImplementedError()\n\n\nif __name__ == '__main__':\n    uvicorn.run('example:app', reload=True)\n</code></pre> <p>Check the response using <code>curl</code>.</p> <pre><code>curl http://127.0.0.1:8000/\n</code></pre> <p>Called API must return mocked data:</p> <pre><code>[\n  {\n    \"id\": 5392,\n    \"name\": \"gVzyVVUmGGevXlQvXGBW\"\n  }\n]\n</code></pre>"},{"location":"api/","title":"Reference","text":""},{"location":"api/#fastapi_mock_middleware.MockAPIMiddleware","title":"fastapi_mock_middleware.MockAPIMiddleware","text":"<pre><code>MockAPIMiddleware(app, not_implemented_error_class=APINotImplementedError, content_mocked_header_name='X-Content-Mocked', default_list_size=10)\n</code></pre> <p>Mock API middleware</p> <p>Mocks unimplemented endpoint responses with generated data according to their response models.</p> PARAMETER DESCRIPTION <code>app</code> <p>ASGI application</p> <p> </p> <code>not_implemented_error_class</code> <p>Exception class on raising which middleware returns mocked response: Default: <code>APINotImplementedError</code>. It's not encouraged to use the built-in NotImplementedError not to confuse with the one intended for API mocking.</p> <p> TYPE: <code>Exception</code> DEFAULT: <code>APINotImplementedError</code> </p> <code>content_mocked_header_name</code> <p>response header name indicating that the response has been mocked. Default: <code>X-Content-Mocked</code></p> <p> TYPE: <code>str</code> DEFAULT: <code>'X-Content-Mocked'</code> </p> <code>default_list_size</code> <p>List size to generate for list responses.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> Usage example <pre><code>app = FastAPI()\napp.add_middleware(MockAPIMiddleware)\n</code></pre> Usage example with arguments <pre><code>app = FastAPI()\napp.add_middleware(\n    MockAPIMiddleware,\n    not_implemented_error_class=APINotImplementedError,\n    content_mocked_header_name='X-Content-Mocked',\n    default_list_size=10,\n)\n</code></pre> Source code in <code>fastapi_mock_middleware/middleware.py</code> <pre><code>def __init__(\n        self,\n        app,\n        not_implemented_error_class: Exception = APINotImplementedError,\n        content_mocked_header_name: str = 'X-Content-Mocked',\n        default_list_size: int = 10,\n):\n    \"\"\"\n    Mock API middleware\n\n    Mocks unimplemented endpoint responses with generated data according\n    to their response models.\n\n    Args:\n        app: ASGI application\n        not_implemented_error_class: Exception class on raising which\n            middleware returns mocked response: Default:\n            `APINotImplementedError`. It's not encouraged to use the\n            built-in NotImplementedError not to confuse with the one\n            intended for API mocking.\n        content_mocked_header_name: response header name indicating that the\n            response has been mocked. Default: `X-Content-Mocked`\n        default_list_size: List size to generate for list responses.\n\n    Usage example:\n        ```python\n        app = FastAPI()\n        app.add_middleware(MockAPIMiddleware)\n        ```\n\n    Usage example with arguments:\n        ```python\n        app = FastAPI()\n        app.add_middleware(\n            MockAPIMiddleware,\n            not_implemented_error_class=APINotImplementedError,\n            content_mocked_header_name='X-Content-Mocked',\n            default_list_size=10,\n        )\n        ```\n    \"\"\"\n    logger.warning(self.warning_msg % self.__class__.__name__)\n    self.app = app\n    self.not_implemented_error_class = not_implemented_error_class\n    self.content_mocked_header_name = content_mocked_header_name\n    self.default_list_size = default_list_size\n</code></pre>"},{"location":"api/#fastapi_mock_middleware.MockAPIMiddleware.get_content","title":"get_content  <code>async</code>","text":"<pre><code>get_content(scope, list_size=10)\n</code></pre> <p>Get generated content conforming to the route response model</p> Source code in <code>fastapi_mock_middleware/middleware.py</code> <pre><code>async def get_content(self, scope, list_size: int = 10) -&gt; Optional[dict]:\n    \"\"\"Get generated content conforming to the route response model\"\"\"\n    route: APIRoute = scope['route']\n    if not route.response_model:\n        return None\n    if route.response_model is Any:\n        return {}\n\n    content = None\n    factory_class = self.get_mock_factory_class(route.response_model)\n    if factory_class:\n        factory = factory_class.create_factory(model=route.response_model, __use_defaults__=True)\n        content = factory.build()\n    elif isinstance(route.response_model, GenericAlias) and issubclass(get_origin(route.response_model), Sequence):\n        # e.g. list[Model]\n        item_type = get_args(route.response_model)[0]\n        factory_class = self.get_mock_factory_class(item_type)\n        if factory_class:\n            factory = factory_class.create_factory(model=item_type, __use_defaults__=True)\n            content = [factory.build() for _ in range(list_size)]\n        else:\n            content = BaseFactory.__faker__.pylist(list_size, value_types=[item_type], variable_nb_elements=False)\n    elif isinstance(route.response_model, GenericAlias) and issubclass(get_origin(route.response_model), Mapping):\n        # e.g. dict[str, Model]\n        key_type, value_type = get_args(route.response_model)\n        factory_class = self.get_mock_factory_class(value_type)\n        if factory_class:\n            factory = factory_class.create_factory(model=value_type, __use_defaults__=True)\n            content = {\n                key_type(): factory.build()\n            }\n        else:\n            content = BaseFactory.__faker__.pydict(1, value_types=[value_type])\n    else:\n        provider = BaseFactory.get_provider_map().get(route.response_model, None)\n        if provider:\n            content = provider()\n        else:\n            raise ValueError(f'Cannot mock {route.response_model.__name__}')\n\n    content = await serialize_response(\n        field=route.response_field,\n        response_content=content,\n        include=route.response_model_include,\n        exclude=route.response_model_exclude,\n        by_alias=route.response_model_by_alias,\n        exclude_unset=route.response_model_exclude_unset,\n        exclude_defaults=route.response_model_exclude_defaults,\n        exclude_none=route.response_model_exclude_none,\n    )\n    return content\n</code></pre>"},{"location":"api/#fastapi_mock_middleware.APINotImplementedError","title":"fastapi_mock_middleware.APINotImplementedError","text":"<pre><code>APINotImplementedError(*, return_value=None, list_size=None)\n</code></pre> <p>               Bases: <code>NotImplementedError</code></p> <p>API NotImplementedError</p> <p>Exception class to be risen on unimplemented endpoints for mocking their response data by <code>MockAPIMiddleware</code></p> PARAMETER DESCRIPTION <code>return_value</code> <p>Value to return as mock data. Optional, in most cases autogenerated data should be enough. Use when specific data is required or in complex cases where data mocking according to response model did not work as expected.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>list_size</code> <p>List size to generate for list responses.</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> Source code in <code>fastapi_mock_middleware/middleware.py</code> <pre><code>def __init__(self, *, return_value: Any = None, list_size: int = None):\n    \"\"\"\n    API NotImplementedError\n\n    Exception class to be risen on unimplemented endpoints for mocking their\n    response data by `MockAPIMiddleware`\n\n    Args:\n        return_value: Value to return as mock data. Optional, in most cases\n            autogenerated data should be enough. Use when specific data\n            is required or in complex cases where data mocking according to\n            response model did not work as expected.\n        list_size: List size to generate for list responses.\n    \"\"\"\n    super().__init__()\n    self.return_value = return_value\n    self.list_size = list_size\n</code></pre>"},{"location":"example/","title":"Full CRUD example","text":"<p>Let's assume that we have designed the following API:</p> <pre><code>import uvicorn\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass Item(BaseModel):\n    id: int\n    name: str\n\n\nclass CreateItem(BaseModel):\n    name: str\n\n\n@app.get('/')\nasync def list_items(offset: int = 0, limit: int = 20, q: str = None) -&gt; list[Item]:\n    raise NotImplementedError()\n\n\n@app.post('/', status_code=201)\nasync def create_item(*, item_in: CreateItem) -&gt; Item:\n    raise NotImplementedError()\n\n\n@app.get('/{uid}/')\nasync def get_item(*, uid: int) -&gt; Item:\n    raise NotImplementedError()\n\n\n@app.put('/{uid}/')\nasync def update_item(*, uid: int, item_in: Item) -&gt; Item:\n    raise NotImplementedError()\n\n\n@app.delete('/{uid}/', status_code=204)\nasync def delete_item(*, uid: int) -&gt; None:\n    raise NotImplementedError()\n\n\nif __name__ == '__main__':\n    uvicorn.run('example:app', reload=True)\n</code></pre> <p>We have prepared endpoints, described filters, chosen pagination methods, and defined the input and output data formats, but implementation is not yet ready. After the server starts, we can see the OpenAPI schema and the UI for it at http://127.0.0.1:8000/docs/. We can share the schema of our API with other teams so that they can start doing their part of the work while we implement the internal logic of our application in parallel. But there's a small problem: when we make a request to our API, it responds with an error, meaning it's not quite ready to use.</p> <p>Let's have a look at the solution!</p>"},{"location":"example/#configure-mocking","title":"Configure mocking","text":"<p>Add <code>MockAPIMiddleware</code> middleware to app and raise <code>APINotImplementedError</code> in your endpoint stubs.</p> <pre><code>import uvicorn\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nfrom fastapi_mock_middleware import MockAPIMiddleware, APINotImplementedError\n\napp = FastAPI()\napp.add_middleware(MockAPIMiddleware)\n\n\nclass Item(BaseModel):\n    id: int\n    name: str\n\n\nclass CreateItem(BaseModel):\n    name: str\n\n\n@app.get('/')\nasync def list_items(offset: int = 0, limit: int = 20, q: str = None) -&gt; list[Item]:\n    raise APINotImplementedError()\n\n\n@app.post('/', status_code=201)\nasync def create_item(*, item_in: CreateItem) -&gt; Item:\n    raise APINotImplementedError()\n\n\n@app.get('/{uid}/')\nasync def get_item(*, uid: int) -&gt; Item:\n    raise APINotImplementedError()\n\n\n@app.put('/{uid}/')\nasync def update_item(*, uid: int, item_in: Item) -&gt; Item:\n    raise APINotImplementedError()\n\n\n@app.delete('/{uid}/', status_code=204)\nasync def delete_item(*, uid: int) -&gt; None:\n    raise APINotImplementedError()\n\n\nif __name__ == '__main__':\n    uvicorn.run('example:app', reload=True)\n</code></pre>"},{"location":"example/#check-it","title":"Check it","text":"<p>Open your browser at http://127.0.0.1:8000/docs and try to call API using Swagger UI or use <code>curl</code>. All called APIs must return mocked data as a response.</p> <ul> <li>Get list:</li> </ul> <pre><code>curl http://127.0.0.1:8000/\n</code></pre> <ul> <li>Get one:</li> </ul> <pre><code>curl http://127.0.0.1:8000/1/\n</code></pre> <ul> <li>Create:</li> </ul> <pre><code>curl -X POST http://127.0.0.1:8000/ -H 'Content-Type: application/json' -d '{\n  \"name\": \"string\"\n}'\n</code></pre> <ul> <li>Update:</li> </ul> <pre><code>curl -X PUT http://127.0.0.1:8000/1/ -H 'Content-Type: application/json' -d '{\n  \"id\": 1,\n  \"name\": \"string\"\n}'\n</code></pre> <ul> <li>Delete</li> </ul> <pre><code>curl -X DELETE -v http://127.0.0.1:8000/1/\n</code></pre>"}]}